<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- add with spring -->
	<!-- best practice to scan whole application excluding the controller in 
		this service context -->
	<context:component-scan base-package="us.jblog.aggregator">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 11 -->
	<!-- we could add any bean that implements the datasource, but we use test 
		database, spring can help us with jdbc namespace. Using that spring jdbc 
		namespace we can define enbedded database, with type and id definition. This 
		create a datasource. This can be referred in EMF decribed above. For production 
		database the definition will be different. So ideally, add datasource first 
		followed by EMF definition above. -->
	<!-- <jdbc:embedded-database id="dataSource" type="HSQL"></jdbc:embedded-database>  this configuration moved to database-dev.xml -->
	
	<!-- if not embedded, external database can be used as shown below -->
	<!-- <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName">
            <value>org.hsqldb.jdbcDriver</value>
        </property>
        <property name="url">
            <value>jdbc:hsqldb:hsql://localhost/</value>
        </property>
        <property name="username">
            <value>sa</value>
        </property>
        <property name="password">
            <value></value>
        </property>
    </bean> -->

	<!-- 12 -->
	<!-- best option for entitymanager factory bean is gives full control over 
		EntityManagerFactory configuration and is appropriate for environments where 
		fine-grained customization is required. This bean needs a datasource. Add 
		database drive into pom xml. In our case for testing we added hsqldb driver. -->
	<bean id="emf"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- packagesToScan is a new addition to properties, to allow adding entity 
			package to scan -->
		<property name="packagesToScan" value="us.jblog.aggregator.entity" />
		<!-- 15 -->
		<!-- jpa properties needs to be added to the EMF -->
		<property name="jpaProperties">
			<props>
				<!-- only enabled in dev scenarios -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- if not using embedded database, then dialect is a must -->
				<!-- <prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop> -->
				<!-- only enabled as create in dev scenarios, prod will have update, 
					this create whole database defined under packages to scan. Once done, add 
					some entities under package defined above. -->
				<prop key="hibernate.hbm2ddl.auto">create</prop>
			</props>
		</property>
		<!-- If the below property is not defined then the following exception 
			gets thrown by the application "org.springframework.beans.factory.BeanCreationException: 
			Error creating bean with name 'myEmf' defined in ServletContext resource 
			[/WEB-INF/applicationContext.xml]: Invocation of init method failed; nested 
			exception is java.lang.IllegalArgumentException: No PersistenceProvider specified 
			in EntityManagerFactory configuration, and chosen PersistenceUnitInfo does 
			not specify a provider class name either" -->
		<property name="persistenceProvider">
			<bean class="org.hibernate.jpa.HibernatePersistenceProvider" />
		</property>
		<!-- successfull exectuion will show the entity that got created. As shown 
			below - Hibernate: drop table User if exists Hibernate: create table User 
			(id integer generated by default as identity (start with 1), primary key 
			(id)) -->
	</bean>

	<!-- 13 -->
	<!-- Once database drive, datasource and EMF defined, transactions needs 
		to be enabled This can be done using annotations, by adding tag 'tx'. This 
		needs another bean, can be found in documentation. Just look for 'JpaTransactionManager' 
		in spring documentation. This needs datasource, refer accordingly. -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 14 -->
	<!-- Just look for 'JpaTransactionManager' in spring documentation. This 
		needs datasource, refer accordingly. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 16 -->
	<!-- Install JPA diagram editor. Video link - http://www.javavids.com/video/eclipse-jpa-diagram-editor.html. 
		Once added, change project > properties > project facets > jpa > 2.1 > further 
		configuration > generic and disable library configuration. Click ok. Go to 
		persistence.xml file under src > META-INF and add entities -->

	<!-- 17 -->
	<!-- After adding entities, Data JPA needs to be configured to refer to 
		repositories. Enable jpa namespace and use the same to configure repository 
		package, emf and transaction manager -->
	<jpa:repositories base-package="us.jblog.aggregator.repository" transaction-manager-ref="transactionManager"
	entity-manager-factory-ref="emf"/>

	<!-- after adding jpa repository configuration, add the repository interface 
		for every entity listed in the project -->
	
	<!-- step 28, importing security configuration file -->
	<import resource="security.xml"/>
	
	<!-- step 46, added task namespace in order to enable enable annotation driven task scheduling.
	Next add a method to blogservice to reloadBlogs-->
	<task:annotation-driven/>	
	
	<!-- step 47, to provide multi environment configuration -->
	<beans profile="dev">
	<!-- when in dev mode, we import database-dev.xml -->
		<import resource="database-dev.xml"/>
	</beans>
	
	<beans profile="prod">
	<!-- when in production mode, we import database-prod.xml.  -->
		<import resource="database-prod.xml"/>
	</beans>
</beans>
