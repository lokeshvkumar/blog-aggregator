<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- MAKE SURE THIS SECURITY CONFIGURATION FILE IS IMPORTED INTO CONTEXT -->
	<!-- Noticed that accessing userdetail link directly worked, hence change 
		and add additional pattern -->
	<!-- This configuration was copied from http://docs.spring.io/spring-security/site/docs/3.2.6.RELEASE/reference/htmlsingle/#ns-config 
		Notice that this definition uses beans:beans style of configuration for ease 
		of read and to have all security related configuration in one file. -->

	<!-- Basic security configuration option 1, but where do you get the user 
		from? athenticationmanager -->
	<!-- You may change the url pattern to application specific pattern. -->
	<!-- step 29 is for custom security login form -->
	<!-- step 30 logout functionality. Its out of the box functionality. Just 
		add additional attribute to the logout tag under http section. just add logout-url 
		and give a value. Hit the url in browser, application logs out. Just add 
		an additional tab section for logout. -->
	<!-- step 31. Better way to handle roles is to enable security expressions 
		and use inbuilt functions. enable by providing attribute use-expressions="true" 
		for http section and use functions like hasRole('ROLE_ADMIN'). This just 
		provides more flexibility when it comes to using various functions - refer 
		section 3.1.1. Common Built-In Expressions under http://docs.spring.io/spring-security/site/docs/3.2.6.RELEASE/reference/htmlsingle/#ns-config -->
	<!-- step 32, is about authirozation. Limiting users to pages they are entitled 
		to see. steps to do this - 1. enable expression to http section 2. in pom.xml 
		add dependency 'spring security taglib' -->
	<!-- step 41, ways to avoid one user delete other users blogs. Using annotations. Enable annotations first by declaring
	global-method-security  and enable pre-post-annotations. By default they are disabled. Along with this
	in user controller, just cant delete blog but find blog and-->
	<global-method-security pre-post-annotations="enabled"/>
	<http use-expressions="true">
		<intercept-url pattern="/users**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/users/*" access="hasRole('ROLE_ADMIN')" /> <!-- added to avoid any sort of access to user detail -->
		<intercept-url pattern="/account*" access="hasRole('ROLE_USER')" />
		
		<form-login login-page="/login" />
		<logout logout-url="/logout" />
	</http>

	<!-- This configuration can be used to pull users from database. Altered 
		in next section. -->
	<!-- <authentication-manager> <authentication-provider> <user-service> <user 
		name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN" /> </user-service> 
		</authentication-provider> </authentication-manager> -->

	<!-- step 33, This service was configured to pull users from database. Basec 
		on the database configuration, create select queries. This refers the dataSource configured in the applicationContext.xml
		step 34 is about password encryption-->
		
		<!-- step 34, password encoder can be added to the authentication manager to encode the password. After adding the password-encoder 
		undet authentication section, use BCryptPasswordEncoder in places in the code where password is being used. 
		i.e. InitDBService-->
	<authentication-manager>
		<authentication-provider>
		<password-encoder hash="bcrypt"/>
			<!-- step 35 is to complete the registration form, for anyone who regiesters should be able to login.
			Also the users-by-username-query below allows all users, but the registered user does not get authenticated.
			Hence the change is required. So modify the query, select another column enabled in query, modify the user entity
			and add another column to the entity .-->
			
			<jdbc-user-service data-source-ref="dataSource" 
			authorities-by-username-query="select user.name, role.name from user join join_user_role 
			on user.id=join_user_role.id join Role on join_user_role.roleId=role.roleId where user.name=?"
			users-by-username-query="select name, password, enabled from user where name = ?" />
		</authentication-provider>
	</authentication-manager>
</beans:beans>